package test;

/*
 * GUI.java
 *
 * Created on Oct 13, 2011, 1:28:03 PM
 */
/**
 *
 * @author Thai Son Dinh Tran
 * Assigment 1 Computer Network - BitCrazy Application
 */

import javax.swing.*;
import java.io.*;
import javax.swing.table.DefaultTableModel;
import java.net.*;



public final class GUI extends javax.swing.JFrame /*implements Runnable*/{

    
    public static final int NAME_COL = 0;
    public static final int SIZE_COL = 1;
    public static final int STATUS_COL = 2;
    public static final int HASH_COL = 3;
    public static final int LOCATION_COL = 4;
    //create file list
    public ListFile fileLst;
    
    //create socket
//    public static Socket sk;
    public static ServerSocket sv;
    
    private static Client client;
    private DefaultTableModel model;
    private int sltRow = 0;
    private int row = 0;
    private int hash = 0;
    String fileName = null;
    String filePath = null;
    private String path;
   
//    Calendar cal = new GregorianCalendar();
    
//    public FileWriter fstream;
//    public BufferedWriter log;
// Get the components of the time
//    int hour12 = cal.get(Calendar.HOUR);            // 0..11
//    int hour24 = cal.get(Calendar.HOUR_OF_DAY);     // 0..23
//    int min = cal.get(Calendar.MINUTE);             // 0..59
//    int sec = cal.get(Calendar.SECOND);             // 0..59
//    int ms = cal.get(Calendar.MILLISECOND);         // 0..999
//    int ampm = cal.get(Calendar.AM_PM);             // 0=AM, 1=PM
//    
    

    /** Creates new form GUI */
    public GUI() {
        super();
        initComponents();
        fileLst = new ListFile();
    }
    public void showMessage(String message){
        JOptionPane.showMessageDialog(this, message);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileBrowser = new javax.swing.JFileChooser();
        addButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        pathField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        FileTable = new javax.swing.JTable(model){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        removeButton = new javax.swing.JButton();
        addHashButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();

        fileBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileBrowserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BitCrazy on port 5554");

        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        startButton.setText("START");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        pathField.setEditable(false);

        model = new DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Name", "Size", "Status", "Hash" , "Location"
            }
        );
        FileTable.setModel(model );
        FileTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        FileTable.setName(""); // NOI18N
        jScrollPane1.setViewportView(FileTable);
        FileTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        removeButton.setText("REMOVE");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        addHashButton.setText("ADDHASH");
        addHashButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHashButtonActionPerformed(evt);
            }
        });

        stopButton.setText("STOP");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addHashButton))
                    .addComponent(pathField, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, addHashButton, removeButton, startButton, stopButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(startButton)
                    .addComponent(removeButton)
                    .addComponent(stopButton)
                    .addComponent(addHashButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addButton, addHashButton, removeButton, startButton, stopButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
    //Create a file chooser
    
    fileBrowser.showOpenDialog(this);
   
}//GEN-LAST:event_addButtonActionPerformed

private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
    int removedRow = FileTable.getSelectedRow();
    if(removedRow >= 0){
        int Hash = Integer.parseInt(FileTable.getValueAt(removedRow, HASH_COL).toString());
        fileLst.removeFile(Hash);
        
        model.removeRow(FileTable.getSelectedRow()); 
        this.row--;
    }
}//GEN-LAST:event_removeButtonActionPerformed

private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
       
    sltRow = FileTable.getSelectedRow();
    String status = null;
    int Hash = -1;
    if(sltRow != -1){
        Hash = getHashCol(sltRow);
        if(FileTable.getValueAt(sltRow, STATUS_COL) == null){//if not seeding or done
            setStatus("Seeding",sltRow);
  
            try{
//                boolean success = client.seedFile(getHashCol(sltRow), getSizeCol(sltRow));
//                if(success){
                    //Calling thread Listener to listen for request from other peers
                    (new Thread(new Listener(Server.server,this,Hash))).start();
//                }
            }catch(Exception e){
                showMess(this,e.getMessage());
            }
        }
    }

}//GEN-LAST:event_startButtonActionPerformed


private void addHashButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHashButtonActionPerformed
    String str = JOptionPane.showInputDialog(this,"Enter hash : ");
    if(str != null){
        try{
            hash = Integer.parseInt(str);
            FileDownload down = new FileDownload(hash,this);
            (new Thread(down)).start();
        }catch(Exception e){
            showMess(this,"Invalid hash : "+str);
        }
    }
    
}//GEN-LAST:event_addHashButtonActionPerformed

private void fileBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileBrowserActionPerformed
    if (JFileChooser.APPROVE_SELECTION.equals(evt.getActionCommand())) {
            // Open or Save was clicked
        //Get information of selectedFile
        File selectedFile = fileBrowser.getSelectedFile();
        
        
        //Set the path of selectedFile to pathField
        pathField.setText(filePath);
    
        boolean already = false;
        
        for(int i = 0; i < row; i++){
            if(getHashCol(i) == selectedFile.hashCode()){
                showMess(this,"This file has already added!");
                already = true;
                break;
            }
        }
        if(!already){
         
            fileLst.addFile(filePath, selectedFile.length(), selectedFile.hashCode());
            
            //Add a row into the table
            addRow();
            setName(selectedFile.getName(),getCurrentRow());
            setSize(selectedFile.length(),getCurrentRow());
            setHash(selectedFile.hashCode(),getCurrentRow());
            setPath(selectedFile.getAbsolutePath(),getCurrentRow());

            Client theClient = new Client();///MT
            try {
                System.out.println(String.format("%d %d", selectedFile.hashCode(), selectedFile.length()));
                theClient.seedFile(selectedFile.hashCode(), selectedFile.length());
                theClient.finishSocket();
            } catch (IOException ioe) {
                System.out.println("Cannot seed file: " + ioe.getMessage());
            }
        }
   
    }
}//GEN-LAST:event_fileBrowserActionPerformed

private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
    int selectRow = FileTable.getSelectedRow();
    if(sltRow > -1){
        if(getStatusCol(sltRow).equals("Seeding")){
            //Notice to server that you stopped this hash
            try{
                boolean success = client.stopSeed(getHashCol(sltRow));
                if(success){
                    
                }
            }catch(Exception e){
                showMess(this,e.getMessage());
            }
        }
    }
}//GEN-LAST:event_stopButtonActionPerformed

public void setText(String text){
    pathField.setText(text);
}

public void showMess(GUI parent,String str){
    JOptionPane.showMessageDialog(parent, str);
}
/*
 * These func use for file list
 */
public int getHash(){
    return this.hash;
}

public String getFileName(){
    return this.fileName;
}
public String getFilePath(){
    return this.filePath;
}
public int getCurrentRow(){
    return countRow() - 1;
}
public int getSelectRow(){
    return this.sltRow;
}
//--------------------------------------------------------------
/*
 * These func use for file table
 */
public int countRow(){
    return FileTable.getRowCount();
}
public void increaseRow(){
    this.row++;
}

public void addRow(){
    model.addRow(new Object[]{null,null,null,null,null});
}
public String getNameCol(int row){
    return FileTable.getValueAt(row, NAME_COL).toString();
}

public long getSizeCol(int row){
    return Long.parseLong(FileTable.getValueAt(row, SIZE_COL).toString());
}

public String getStatusCol(int row){
    return FileTable.getValueAt(row, STATUS_COL).toString();
}

public int getHashCol(int row){
    return Integer.parseInt(FileTable.getValueAt(row, HASH_COL).toString());
}

public String getPathCol(int row){
    return FileTable.getValueAt(row, LOCATION_COL).toString();
}

public void setName(String name,int sltRow){
    FileTable.setValueAt(name, sltRow, NAME_COL);
}
public void setSize(long size, int sltRow){
    FileTable.setValueAt(size, sltRow, SIZE_COL);
}
public void setStatus(String status, int sltRow){
    FileTable.setValueAt(status, sltRow, STATUS_COL);
}
public void setHash(int hash, int sltRow){
    FileTable.setValueAt(hash, sltRow, HASH_COL);
}
public void setPath(String loc, int sltRow){
    FileTable.setValueAt(loc, sltRow, LOCATION_COL);
}

//------------------------------------------------------------

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                

}
            }
        } 
 
 
 catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            GUI UI;
            @Override
            public void run() {
                try {
                    //Create server socket
                    Server sv = new Server();
                    
                    UI = new GUI();
                    UI.setVisible(true);
                    
                    //Register to server to seed
//                    client = new Client();
                    
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(UI, ex.getMessage());
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable FileTable;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addHashButton;
    private javax.swing.JFileChooser fileBrowser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pathField;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
